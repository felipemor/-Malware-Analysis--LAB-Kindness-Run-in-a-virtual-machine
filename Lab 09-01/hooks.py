from pydbg import *
from pydbg.defines import *
import utils
import sys

# functions hooked (dll name, function name, args quantity)
hooked_func = [
    ['kernel32.dll','CreateFileW',7],
    ['kernel32.dll','DeleteFileW',1],
    ['kernel32.dll','MoveFileExW',3],
    ['kernel32.dll','WriteFile',5],
    ['kernel32.dll','ReadFile',5],
    ['wininet.dll','InternetOpenUrlW',6],
    ['kernel32.dll','CreateProcessA',10],
    ['kernel32.dll','CreateProcessW',10],
    ['kernel32.dll','TerminateProcess',2],
    ['kernel32.dll','ExitProcess',1],
    ['kernel32.dll','CreateThread',6],
    ['kernel32.dll','CreateRemoteThread',7],
    ['advapi32.dll','CreateServiceA',13],
    ['advapi32.dll','CreateServiceW',13],
    ['advapi32.dll','OpenServiceW',3],
    ['advapi32.dll','StartServiceW',3],
    ['advapi32.dll','ControlService',3],
    ['advapi32.dll','DeleteService',3],
    ['user32.dll','SetWindowsHookExA',4],
    ['user32.dll','SetWindowsHookExW',4],
    ['kernel32.dll','Sleep',1],
    ['kernel32.dll','LoadLibraryA',1],
    ['kernel32.dll','LoadLibraryW',1],
    ['kernel32.dll','IsDebuggerPresent',0],
    ['user32.dll','ExitWindowsEx',2]    
]

dbg = pydbg()
addr_func = {}

# function executed when the hook has been reached
def entry_hook(dbg, args):
    try:
        out = addr_func[dbg.context.Eip]
        out = out + " - Args:"
        for arg in args:
            out = out + " " + hex(arg).rstrip('L')            
        print out
    except:
        print "Unexpected error:", sys.exc_info()[0]
    return DBG_CONTINUE  

try:        

    # search for -p <PID> param
    i=0
    while (i<len(sys.argv)):
        if sys.argv[i]=='-p': PID = int(sys.argv[i+1])
        i=i+1

    if PID>0:
        
        dbg.attach(PID)
        hooks = utils.hook_container()

        # add the hooks from hooked_func 
        for func in hooked_func:
            address = dbg.func_resolve_debuggee(func[0],func[1])
            
            addr_func[address] = func[1]    
            if address:
                hooks.add(dbg, address, func[2], entry_hook, None)       
            else:
                print "Error hooking function: " + func[1]

        dbg.run()
except:
    print "Usage: python hooks.py -p <PID>"
